import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { fetchData } from "./FnGetData"
import { callUpdate } from "./FnUpdatePosition"
export interface CounterState {
  status: "idle" | "loading" | "failed",
  data: [],
  tmp: [],
  fiterStatus : Number
}

const initialState: CounterState = {
  status: "idle",
  data : [],
  tmp: [],
  fiterStatus : 1
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(tasktAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
const updPositon = (data,token: string) => {

  callUpdate(data,token);
}
export const tasktAsync = createAsyncThunk(
  "counter/fetchData",
  async (token: string) => {
    let response;
    try {
      response = await fetchData(token)
    } catch (err) {
      response = err.response.status;
    }
   
    return response
  },
)

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    updatePosition:(state, action: PayloadAction) => {
        let position = [0,0];
        let newData = [];
        //console.log(action.payload.data)
        action.payload.data.map(item =>{
          let i = item.status == true ? 0 : 1;
          let newItem = {
            ...item,
            'position' : position[i]++
          }
       
          newData.push(newItem) 
        })
        updPositon(newData,action.payload.Authtoken);
        state.data = newData;
    },

    Filter: (state, action: PayloadAction) => {
         
          let filter = state.tmp.filter(function(item) {
            return item.status == action.payload.status
          });
          state.fiterStatus = action.payload.status
          state.data = filter;

          
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(tasktAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(tasktAsync.fulfilled, (state, action) => {
        
        if(action.payload == 500){
          state.status = "failed"
          localStorage.removeItem('authid');
          localStorage.removeItem('authtoken');
          window.location.replace('/login');
        } else {
          state.status = "idle"
          state.tmp = action.payload
          state.data = action.payload
    
          let filter = state.data.filter(function(item) {
            return item.status == state.fiterStatus
          });
          state.data = filter;
        }
        
      
      })
      .addCase(tasktAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { Filter , updatePosition } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const dataTasks = (state: RootState) => state.task

export default counterSlice.reducer
